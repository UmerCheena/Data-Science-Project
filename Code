import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from plotly.subplots import make_subplots
pd.options.display.max_columns = None
pd.options.display.max_rows = None

file_path = '/mnt/data/Sample - Superstore.csv'
superstore_data = pd.read_csv("/kaggle/input/store-sales-analysis/Sample - Superstore.csv", encoding='latin1')

superstore_data['Order Date'] = pd.to_datetime(superstore_data['Order Date'])
superstore_data['Ship Date'] = pd.to_datetime(superstore_data['Ship Date'])

missing_values = superstore_data.isnull().sum()

superstore_data = superstore_data.drop_duplicates()

superstore_data['Sales'].fillna(superstore_data['Sales'].median(), inplace=True)
superstore_data['Profit'].fillna(superstore_data['Profit'].median(), inplace=True)

print(superstore_data.head())

product_summary = superstore_data.groupby('Product Name').agg({'Sales': 'sum', 'Profit': 'sum', 'Quantity': 'sum'}).reset_index()


top_products_sales = product_summary.sort_values('Sales', ascending=False).head(10)

plt.figure(figsize=(10, 6))
plt.barh(top_products_sales['Product Name'], top_products_sales['Sales'], color='blue', label='Sales')
plt.barh(top_products_sales['Product Name'], top_products_sales['Profit'], color='orange', alpha=0.6, label='Profit')
plt.xlabel('Amount ($)')
plt.title('Top 10 Products by Sales and Profit')
plt.legend()
plt.show()

total_sales = superstore_data['Sales'].sum()
total_profit = superstore_data['Profit'].sum()
avg_profit_margin = (total_profit / total_sales) * 100

print(f"Total Sales: ${total_sales:,.2f}")
print(f"Total Profit: ${total_profit:,.2f}")
print(f"Average Profit Margin: {avg_profit_margin:.2f}%")

discount_analysis = superstore_data.groupby('Discount').agg({'Sales': 'sum', 'Profit': 'sum'}).reset_index()

plt.figure(figsize=(10, 6))
plt.plot(discount_analysis['Discount'], discount_analysis['Sales'], label='Sales', marker='o')
plt.plot(discount_analysis['Discount'], discount_analysis['Profit'], label='Profit', marker='o', linestyle='--')
plt.xlabel('Discount Percentage')
plt.ylabel('Amount ($)')
plt.title('Impact of Discount on Sales and Profit')
plt.legend()
plt.show()

region_performance = superstore_data.groupby('Region').agg({'Sales': 'sum', 'Profit': 'sum'}).reset_index()

plt.figure(figsize=(10, 6))
plt.bar(region_performance['Region'], region_performance['Sales'], label='Sales')
plt.bar(region_performance['Region'], region_performance['Profit'], label='Profit', alpha=0.6)
plt.xlabel('Region')
plt.ylabel('Amount ($)')
plt.title('Sales and Profit by Region')
plt.legend()
plt.show()

segment_performance = superstore_data.groupby('Segment').agg({'Sales': 'sum', 'Profit': 'sum'}).reset_index()

plt.figure(figsize=(10, 6))
plt.bar(segment_performance['Segment'], segment_performance['Sales'], label='Sales')
plt.bar(segment_performance['Segment'], segment_performance['Profit'], label='Profit', alpha=0.6)
plt.xlabel('Segment')
plt.ylabel('Amount ($)')
plt.title('Sales and Profit by Segment')
plt.legend()
plt.show()

category_performance = superstore_data.groupby('Category').agg({'Sales': 'sum', 'Profit': 'sum'}).reset_index()

print(category_performance.sort_values('Sales', ascending=False))

category_performance.to_excel("product_performance_report.xlsx", index=False)

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import pandas as pd

tasks = [
    {"Task": "Data Preprocessing", "Start": "2025-06-19", "End": "2025-06-20"},
    {"Task": "Exploratory Data Analysis", "Start": "2025-06-21", "End": "2025-06-23"},
    {"Task": "Identify Key Performance Indicators", "Start": "2025-06-24", "End": "2025-06-24"},
    {"Task": "Advanced Analysis", "Start": "2025-06-25", "End": "2025-06-28"},
    {"Task": "Prepare Insights and Report", "Start": "2025-06-29", "End": "2025-06-30"},
    {"Task": "Assessment Preparation", "Start": "2025-07-01", "End": "2025-07-01"}
]

df = pd.DataFrame(tasks)
df['Start'] = pd.to_datetime(df['Start'])
df['End'] = pd.to_datetime(df['End'])

fig, ax = plt.subplots(figsize=(10, 6))

for idx, row in df.iterrows():
    ax.barh(row['Task'], (row['End'] - row['Start']).days, left=row['Start'], height=0.4)

ax.xaxis.set_major_locator(mdates.WeekdayLocator())
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))
plt.xticks(rotation=45)

plt.xlabel("Date")
plt.ylabel("Task")
plt.title("Project Timeline (Gantt Chart)")

plt.tight_layout()
plt.show()

